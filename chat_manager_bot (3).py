import logging
import json
import re
from datetime import datetime, timedelta
from telegram import Update, ChatMemberUpdated
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ChatMemberHandler
from telegram.constants import ChatMemberStatus, ParseMode

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
chat_settings = {}
user_warnings = {}
spam_tracker = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–∞—Ç–∞
DEFAULT_SETTINGS = {
    "welcome_enabled": True,
    "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {name}! üëã",
    "goodbye_enabled": True,
    "goodbye_message": "–ü–æ–∫–∞, {name}! üëã",
    "antispam_enabled": True,
    "max_messages_per_minute": 5,
    "auto_delete_links": False,
    "auto_delete_forwards": False,
    "warn_limit": 3,
    "bad_words": ["—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞"],
    "auto_responses": {}
}

def get_chat_settings(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
    if chat_id not in chat_settings:
        chat_settings[chat_id] = DEFAULT_SETTINGS.copy()
    return chat_settings[chat_id]

def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    try:
        chat_member = context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if update.effective_chat.type == "private":
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç.\n\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π —á–∞—Ç –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"
        )
    else:
        await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞:**

**üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:**
/warn [@user] - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unwarn [@user] - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/kick [@user] - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/ban [@user] - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban [@user] - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mute [@user] [–≤—Ä–µ–º—è] - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
/settings - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/welcome on/off - –≤–∫–ª/–≤—ã–∫–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/goodbye on/off - –≤–∫–ª/–≤—ã–∫–ª –ø—Ä–æ—â–∞–Ω–∏–µ
/antispam on/off - –≤–∫–ª/–≤—ã–∫–ª –∞–Ω—Ç–∏-—Å–ø–∞–º
/addresponse [—Å–ª–æ–≤–æ] [–æ—Ç–≤–µ—Ç] - –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
/delresponse [—Å–ª–æ–≤–æ] - —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç

**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/top - —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
/clean [—á–∏—Å–ª–æ] - —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 100)
/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º)
/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
    if not is_admin(update, context):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
        return
    
    chat_id = update.effective_chat.id
    settings = get_chat_settings(chat_id)
    
    settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:**

üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if settings['welcome_enabled'] else '‚ùå'}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{settings['welcome_message']}`

üëã –ü—Ä–æ—â–∞–Ω–∏–µ: {'‚úÖ' if settings['goodbye_enabled'] else '‚ùå'}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{settings['goodbye_message']}`

üõ°Ô∏è –ê–Ω—Ç–∏-—Å–ø–∞–º: {'‚úÖ' if settings['antispam_enabled'] else '‚ùå'}
üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {settings['max_messages_per_minute']}/–º–∏–Ω

üîó –£–¥–∞–ª—è—Ç—å —Å—Å—ã–ª–∫–∏: {'‚úÖ' if settings['auto_delete_links'] else '‚ùå'}
üì§ –£–¥–∞–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {'‚úÖ' if settings['auto_delete_forwards'] else '‚ùå'}

‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {settings['warn_limit']}
üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {len(settings['bad_words'])}
ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {len(settings['auto_responses'])}
    """
    
    await update.message.reply_text(settings_text, parse_mode=ParseMode.MARKDOWN)

async def warn_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(update, context):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ @username
        pass
    
    if not target_user:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username)")
        return
    
    chat_id = update.effective_chat.id
    user_id = target_user.id
    settings = get_chat_settings(chat_id)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if chat_id not in user_warnings:
        user_warnings[chat_id] = {}
    if user_id not in user_warnings[chat_id]:
        user_warnings[chat_id][user_id] = 0
    
    user_warnings[chat_id][user_id] += 1
    warnings = user_warnings[chat_id][user_id]
    
    if warnings >= settings['warn_limit']:
        # –ë–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        try:
            await context.bot.ban_chat_member(chat_id, user_id)
            await update.message.reply_text(f"üî® {target_user.first_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
            user_warnings[chat_id][user_id] = 0
        except:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è {target_user.first_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n"
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}/{settings['warn_limit']}"
        )

async def member_joined(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat_id = update.effective_chat.id
    settings = get_chat_settings(chat_id)
    
    if not settings['welcome_enabled']:
        return
    
    for member in update.message.new_chat_members:
        welcome_text = settings['welcome_message'].format(
            name=member.first_name,
            username=f"@{member.username}" if member.username else member.first_name
        )
        
        await update.message.reply_text(welcome_text)

async def member_left(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat_id = update.effective_chat.id
    settings = get_chat_settings(chat_id)
    
    if not settings['goodbye_enabled']:
        return
    
    left_member = update.message.left_chat_member
    goodbye_text = settings['goodbye_message'].format(
        name=left_member.first_name,
        username=f"@{left_member.username}" if left_member.username else left_member.first_name
    )
    
    await update.message.reply_text(goodbye_text)

async def check_spam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
    if not update.message or not update.effective_user:
        return
        
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    settings = get_chat_settings(chat_id)
    
    if not settings['antispam_enabled']:
        return
    
    # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
    now = datetime.now()
    if chat_id not in spam_tracker:
        spam_tracker[chat_id] = {}
    if user_id not in spam_tracker[chat_id]:
        spam_tracker[chat_id][user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
    spam_tracker[chat_id][user_id] = [
        msg_time for msg_time in spam_tracker[chat_id][user_id]
        if now - msg_time < timedelta(minutes=1)
    ]
    
    spam_tracker[chat_id][user_id].append(now)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(spam_tracker[chat_id][user_id]) > settings['max_messages_per_minute']:
        try:
            await context.bot.delete_message(chat_id, update.message.message_id)
            await update.message.reply_text(f"‚ö†Ô∏è {update.effective_user.first_name}, –Ω–µ —Å–ø–∞–º—å!")
        except:
            pass

async def check_bad_words(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
    if not update.message or not update.message.text:
        return
        
    chat_id = update.effective_chat.id
    settings = get_chat_settings(chat_id)
    message_text = update.message.text.lower()
    
    for bad_word in settings['bad_words']:
        if bad_word.lower() in message_text:
            try:
                await context.bot.delete_message(chat_id, update.message.message_id)
                await update.message.reply_text("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!")
            except:
                pass
            break

async def auto_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã"""
    if not update.message or not update.message.text:
        return
        
    chat_id = update.effective_chat.id
    settings = get_chat_settings(chat_id)
    message_text = update.message.text.lower()
    
    for trigger, response in settings['auto_responses'].items():
        if trigger.lower() in message_text:
            await update.message.reply_text(response)
            break

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await check_spam(update, context)
    await check_bad_words(update, context)
    await auto_response(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("warn", warn_user))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, member_joined))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, member_left))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL, message_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()